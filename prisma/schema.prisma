// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  clients       Client[]
  invoices      Invoice[]
  quotes        Quote[]
  expenses      Expense[]
  company       Company?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id          String   @id @default(cuid())
  name        String
  address     String?
  city        String?
  state       String?
  postalCode  String?
  country     String?
  phone       String?
  email       String?
  website     String?
  taxId       String?
  logoUrl     String?
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clients     Client[]
  invoices    Invoice[]
  quotes      Quote[]
}

model Client {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  city        String?
  state       String?
  postalCode  String?
  country     String?
  notes       String?
  userId      String
  companyId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company?  @relation(fields: [companyId], references: [id])
  invoices    Invoice[]
  quotes      Quote[]
}

model Invoice {
  id              String        @id @default(cuid())
  invoiceNumber   String
  date            DateTime
  dueDate         DateTime
  status          InvoiceStatus @default(DRAFT)
  clientId        String
  userId          String
  companyId       String?
  subtotal        Float
  taxRate         Float         @default(0)
  taxAmount       Float         @default(0)
  total           Float
  notes           String?
  terms           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  items           InvoiceItem[]
  payments        Payment[]
  client          Client        @relation(fields: [clientId], references: [id])
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  company         Company?      @relation(fields: [companyId], references: [id])
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  name        String
  description String?
  quantity    Float
  price       Float
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Payment {
  id          String        @id @default(cuid())
  invoiceId   String
  amount      Float
  date        DateTime
  method      PaymentMethod
  reference   String?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  invoice     Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Quote {
  id            String      @id @default(cuid())
  quoteNumber   String
  date          DateTime
  validUntil    DateTime
  status        QuoteStatus @default(DRAFT)
  clientId      String
  userId        String
  companyId     String?
  subtotal      Float
  taxRate       Float       @default(0)
  taxAmount     Float       @default(0)
  total         Float
  notes         String?
  terms         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         QuoteItem[]
  client        Client      @relation(fields: [clientId], references: [id])
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  company       Company?    @relation(fields: [companyId], references: [id])
}

model QuoteItem {
  id          String   @id @default(cuid())
  quoteId     String
  name        String
  description String?
  quantity    Float
  price       Float
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quote       Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}

model Expense {
  id            String   @id @default(cuid())
  date          DateTime
  category      String
  amount        Float
  description   String?
  receiptUrl    String?
  taxDeductible Boolean  @default(false)
  paymentMethod String
  vendor        String
  tags          String[]
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  CLIENT
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  PAYPAL
  CHECK
  OTHER
}
